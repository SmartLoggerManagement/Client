package tp.rest;

import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;
import java.util.UUID;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.util.JAXBSource;
import javax.xml.transform.Source;
import javax.xml.ws.Endpoint;
import javax.xml.ws.Provider;
import javax.xml.ws.Service;
import javax.xml.ws.ServiceMode;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceProvider;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.http.HTTPBinding;
import javax.xml.ws.http.HTTPException;

import tp.model.Animal;
import tp.model.AnimalNotFoundException;
import tp.model.Cage;
import tp.model.Center;
import tp.model.Position;

@WebServiceProvider
@ServiceMode(value = Service.Mode.MESSAGE)
public class MyServiceTP implements Provider<Source> {

    public final static String url = "http://127.0.0.1:8086/";

    public static void main(String args[]) {
        Endpoint e = Endpoint.create(HTTPBinding.HTTP_BINDING, new MyServiceTP());

        e.publish(url);
        System.out.println("Service started, listening on " + url);
        // pour arrêter : e.stop();
    }

    private JAXBContext jc;

    @javax.annotation.Resource(type = Object.class)
    protected WebServiceContext wsContext;

    private Center center = new Center(new LinkedList<>(), new Position(49.30494d, 1.2170602d), "Biotropica");

    public MyServiceTP() {
        try {
            jc = JAXBContext.newInstance(Center.class, Cage.class, Animal.class, Position.class);
        } catch (JAXBException je) {
            System.out.println("Exception " + je);
            throw new WebServiceException("Cannot create JAXBContext", je);
        }

        // Fill our center with some animals
        Cage usa = new Cage(
                "usa",
                new Position(49.305d, 1.2157357d),
                25,
                new LinkedList<>(Arrays.asList(
                        new Animal("Tic", "usa", "Chipmunk", UUID.randomUUID()),
                        new Animal("Tac", "usa", "Chipmunk", UUID.randomUUID())
                ))
        );

        Cage amazon = new Cage(
                "amazon",
                new Position(49.305142d, 1.2154067d),
                15,
                new LinkedList<>(Arrays.asList(
                        new Animal("Canine", "amazon", "Piranha", UUID.randomUUID()),
                        new Animal("Incisive", "amazon", "Piranha", UUID.randomUUID()),
                        new Animal("Molaire", "amazon", "Piranha", UUID.randomUUID()),
                        new Animal("De lait", "amazon", "Piranha", UUID.randomUUID())
                ))
        );

        center.getCages().addAll(Arrays.asList(usa, amazon));
    }

    public Source invoke(Source source) {
        MessageContext mc = wsContext.getMessageContext();
        String path = (String) mc.get(MessageContext.PATH_INFO);
        String method = (String) mc.get(MessageContext.HTTP_REQUEST_METHOD);

        // determine the targeted ressource of the call
        try {
            // no target, throw a 404 exception.
            if (path == null) {
                throw new HTTPException(404);
            }
            // "/animals" target - Redirect to the method in charge of managing this sort of call.
            else if (path.startsWith("animals")) {
                String[] path_parts = path.split("/");
                switch (path_parts.length){
                    case 1 :
                        return this.animalsCrud(method, source);
                    case 2 :
                        return this.animalCrud(method, source, path_parts[1]);
                   /* case 3 :
                        return this.animalCrud(method, source, path_parts[1], path_parts[2]);*/
                    default:
                        throw new HTTPException(404);
                }
            }
            else if (path.startsWith("find/")) {
            	 String[] path_parts = path.split("/");
                 switch (path_parts[1]){
                     case "byName" : // cas de recherche par nom
                         return this.findByName(method, source,path_parts[1]);
                     case "at" :  // cas de recherche par position
                         return this.findAtPosition(method, source, path_parts[1]);
                     case "near" :  // cas de recherche à cote d'une position
                         return this.findNearPosition(method, source, path_parts[1]);
                     default:
                         throw new HTTPException(404);
                 }
            }
            else if ("coffee".equals(path)) {
                throw new HTTPException(418);
            }
            else {
                throw new HTTPException(404);
            }
        } catch (JAXBException e) {
            throw new HTTPException(500);
        }
    }

    /**
     * Method bound to calls on /animals/{something}
     */
    private Source animalCrud(String method, Source source, String animal_id) throws JAXBException {
        // retourne les informations de l'animal identifié par l ID donné
    	if("GET".equals(method)){ 
            try {
                return new JAXBSource(this.jc, center.findAnimalById(UUID.fromString(animal_id)));
            } catch (AnimalNotFoundException e) {
                throw new HTTPException(404);
            }
        }
    	// crée un animal avec  l ID donné
        else if("POST".equals(method)){
        	Animal animal = unmarshalAnimal(source);
        	UUID id = UUID.fromString(animal_id);
        	animal.setId(id);
            this.center.getCages()
                    .stream()
                    .filter(cage -> cage.getName().equals(animal.getCage()))
                    .findFirst()
                    .orElseThrow(() -> new HTTPException(404))
                    .getResidents()
                    .add(animal);
            return new JAXBSource(this.jc, this.center);
        }
    	// Modifier l'animal avec l'ID donné
        else if("PUT".equals(method)){
        Animal animal = unmarshalAnimal(source);
		Collection<Cage> c = this.center.getCages();
		for (Cage cage2 : c) {
			for (Animal a : cage2.getResidents()) {
				if (a.getId().equals(UUID.fromString(animal_id))) {
					a.setName(animal.getName());
					a.setCage(animal.getCage());
					a.setSpecies(animal.getSpecies());
				}
			}
		}
		return new JAXBSource(this.jc, this.center);
		}
    	// supprimer l'animal avec l'ID donné
        else if("DELETE".equals(method)){
    		Collection<Cage> c = this.center.getCages();
    		for (Cage cage2 : c) {
    			for (Animal a : cage2.getResidents()) {
    				if (a.getId().equals(UUID.fromString(animal_id))) {
    					cage2.getResidents().remove(a);
    				}
    			}
    		}
    		return new JAXBSource(this.jc, this.center);
        }
        else{
            throw new HTTPException(405);
        }
    }
    // wolframe
    /*private Source animalCrud(String method, Source source, String animal_id,String type) throws JAXBException {
        
    }*/

    /**
     * Method bound to calls on /animals
     */
    private Source animalsCrud(String method, Source source) throws JAXBException {
    	// retourne l'ensemble des animaux
        if("GET".equals(method)){
            return new JAXBSource(this.jc, this.center);
        }
        //ajouter un animal dans le centre
        else if("POST".equals(method)){
            Animal animal = unmarshalAnimal(source);
            this.center.getCages()
                    .stream()
                    .filter(cage -> cage.getName().equals(animal.getCage()))
                    .findFirst()
                    .orElseThrow(() -> new HTTPException(404))
                    .getResidents()
                    .add(animal);
            return new JAXBSource(this.jc, this.center);
        }
      //modifier l'ensemble des animaux
        else if("PUT".equals(method)){
        	Animal animal = unmarshalAnimal(source);
			Collection<Cage> c = this.center.getCages();
			for (Cage cage2 : c) {
				if (cage2.getName().equals(animal.getCage())) {
					for (Animal a : cage2.getResidents()) {
						a.setName(animal.getName());
						a.setCage(animal.getCage());
						a.setSpecies(animal.getSpecies());
					}
				}
			}
			return new JAXBSource(this.jc, this.center);	
        }
        // supprimer tous les animaux du centre
        else if("DELETE".equals(method)){
        	Collection<Cage> c = this.center.getCages();
        	for (Cage cage2 : c) {
				cage2.getResidents().removeAll(cage2.getResidents());
			}
        	return new JAXBSource(this.jc, this.center);
        }
        else{
            throw new HTTPException(405);
        }
    }
    // Find By Name
    private Source findByName(String method, Source source, String name) throws JAXBException {
    	if ("GET".equals(method)) {
			try {
				return new JAXBSource(this.jc, this.center.getCages()
									        		.stream()
									                .map(Cage::getResidents)
									                .flatMap(Collection::stream)
									                .filter(animal -> name.equals(animal.getSpecies()))
									                .findFirst()
									                .orElseThrow(AnimalNotFoundException::new));
			} catch (AnimalNotFoundException e) {
				throw new HTTPException(404);
			}
		}

		else {
			throw new HTTPException(405);
		}
    }
    private Source findAtPosition(String method, Source source, String position) throws JAXBException {
    	if ("GET".equals(method)) {
			try {
				return new JAXBSource(this.jc, this.center.getCages()
									                .stream()
									                .filter(center -> position.equals(center.getPosition().getLatitude()+"+"+center.getPosition().getLongitude()))
									                .map(Cage::getResidents)
									                .flatMap(Collection::stream)
									                .findFirst()
									                .orElseThrow(AnimalNotFoundException::new));
			} catch (AnimalNotFoundException e) {
				throw new HTTPException(404);
			}
		}

		else {
			throw new HTTPException(405);
		}
    }
    private Source findNearPosition(String method, Source source, String position) throws JAXBException {
    	if ("GET".equals(method)) {
			return new JAXBSource(this.jc, this.center.getCages()
								                .stream()
								                .filter(center -> position.equals(center.getPosition().getLatitude()+"+"+center.getPosition().getLongitude()))
								                .findAny()
								                .get());
		} else {
			throw new HTTPException(405);
		}
    }

    private Animal unmarshalAnimal(Source source) throws JAXBException {
        return (Animal) this.jc.createUnmarshaller().unmarshal(source);
    }
}
